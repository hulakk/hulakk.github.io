<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>存储系统</title>
    <link href="/2021/12/02/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    <url>/2021/12/02/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h2 id="存储系统概述"><a href="#存储系统概述" class="headerlink" title="存储系统概述"></a>存储系统概述</h2><h3 id="存储系统的层次结构"><a href="#存储系统的层次结构" class="headerlink" title="存储系统的层次结构"></a>存储系统的层次结构</h3><p>存储器分层解决了存储器的性能价格矛盾。</p><h4 id="程序的局部性原理"><a href="#程序的局部性原理" class="headerlink" title="程序的局部性原理"></a>程序的局部性原理</h4><p>统计表明，无论是访问存取指令还是存储数据，在一个较短的时间间隔内，程序所访问的存储器地址在很大比例上集中在存储器地址空间的很小范围内。这种<strong>在某一段时间频繁访问某一局部的存储器地址空间，而对此范围以外的地址空间则很少访问的现象称为程序的局部性原理</strong>。</p><div class="note note-info">            <p>程序的局部性原理可以从两个角度分析。<br>(1)时间局部性：最近被访问的信息很可能在邻近时间内再次被访问。<br>(2)空间局部性：最近被访问的信息邻近地址的信息很可能被访问。</p>          </div><h4 id="多级存储系统的组成"><a href="#多级存储系统的组成" class="headerlink" title="多级存储系统的组成"></a>多级存储系统的组成</h4><p>在CPU内部有少量寄存器可以存储正在执行的指令或者正在参加运算的数据，寄存器的访问速度非常快，但数量较少。正在执行的指令和数据存储在CPU能直接访问的存储器（<strong>内存储器</strong>）中。内存储器速度高、容量小、价格高，由半导体器件构成。</p><p>为了扩大存储容量，在内存储器之外增加容量更大的但访问速度稍慢的<strong>外存储器</strong>，或者称为辅助存储器（辅存）。相对而言，外存储器价格低、容量大、价格便宜，可以由磁盘导体存储器、光盘存储器等非半导体器件或固态半导体存储器构成。CPU不能直接访问外存储器，外存储器的信息必须调入内存储器后才能由CPU处理。</p><p>内存储器和外存储器构成两级存储系统。</p><p>随着半导体技术的发展，CPU和内存储器的工作速度都在提高，但CPU速度提高得更快，而更高速度的内存储器价格非常高。为此，人们在常规内存储器和CPU之间增加了速度更高但容量更小的<strong>高速缓冲存储器</strong>，即cache，用于存放常规内存中正在使用的一些信息块的副本。常规的内存被称为主存。这样，内存储器就分为cache和主存两部分，由此构成三级存储系统:</p><p>CPU内：寄存器、cache<br>主板内：cache、主存<br>主板外：磁盘、光盘</p><h3 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h3><p>存储位元：存储一位二进制代码的存储单位</p><div class="table-container"><table><thead><tr><th>分类依据</th><th>类别</th></tr></thead><tbody><tr><td>存储介质</td><td>半导体存储器、磁表面存储器、光存储器</td></tr><tr><td>存取方式</td><td>随机存取存储器、顺序存取存储器、半顺序存取存储器</td></tr><tr><td>读写功能</td><td>制度存储器、随机存取存储器</td></tr><tr><td>信息易失性</td><td>易失性存储器、非易失性存储器</td></tr><tr><td>与CPU的耦合程度</td><td>内部存储器、外部存储器</td></tr></tbody></table></div><p>计算机系统的主存习惯上被分为RAM和ROM两类。RAM用来储存当前运行的程序和数据，并可以在程序运行过程中反复更改其内容。而ROM常用来储存不变或基本不变的程序和数据（如监控程序、引导加载程序及常数表格等）。RAM可以根据信息存储方法分为<strong>静态RAM</strong>(SRAM)和<strong>动态RAM</strong>(DRAM)。SRAM是用半导体管的“到同”或“截止”来记忆的，只要不掉电，储存的信息就不会丢失。而DRAM的信息使用电荷存储在电容上，随着时间的退役，电荷会逐渐漏掉，储存的信息就会丢失，因此要周期性地对其进行“刷新”。根据工艺和特性的不同，只读存储器又分为掩膜ROM、一次性可编程ROM(PROM)和可擦除PROM(EPROM)，EPROM又分为紫外线擦除EPROM(UV-EPROM)、电擦除EPROM(EEPROM)和闪存只读存储器。</p><h3 id="存储器的编址和端模式"><a href="#存储器的编址和端模式" class="headerlink" title="存储器的编址和端模式"></a>存储器的编址和端模式</h3><p>存放一个机器字的存储但愿，通常称为字存储单元。相应的单元地址成为字地址。而存放义字街的单元，成为字节存储单元，相应的地址成为字节地址。编址方式是存储器地址的组织方式，一般在设计处理器时就已经确定了。如果计算机中编址的最小单位是字存储但愿，则该计算机成为按字编址的计算机。如果计算机中编址的最小单位是字节，则该计算机称为按字节编址的计算机。一个机器字可以包含几个字节，所以一个存储但愿也可占用数个能够单独编址的字节地址。例如，一个16位二进制的字存储但愿包含两字节，当采用按字节编址方式时，该字占两字节地址。  </p><p>当一个存储字的字长高于八位时，就存在一个存储字内部的多字节排列顺序问题，其排列方式成为端模式。打断模式将一个字的高有效字节放在内存的低地址端，低有效字节放在内存的高地址端，而小端模式则将一个字的低有效字节放在内存的低地址端，高有效字节放在内存的高地址端。  </p><h3 id="存储器的技术指标"><a href="#存储器的技术指标" class="headerlink" title="存储器的技术指标"></a>存储器的技术指标</h3><div class="table-container"><table><thead><tr><th>名称</th><th>定义</th></tr></thead><tbody><tr><td>容量</td><td>存储器中可存储的比特数</td></tr><tr><td>存取时间/访问时间</td><td>从存储器接到读写命令开始到信息被读写完成所需的时间</td></tr><tr><td>存储周期/存取周期</td><td>CCCPU连续两次访问存储器的最小时间间隔</td></tr><tr><td>带宽/频宽/数据传送速率</td><td>单位时间里存储器所存储的信息量</td></tr></tbody></table></div><h2 id="静态随机存取存储器-SRAM"><a href="#静态随机存取存储器-SRAM" class="headerlink" title="静态随机存取存储器(SRAM)"></a>静态随机存取存储器(SRAM)</h2><p>SRAM的优点是存取速度快，但存储密度和容量不如DRAM。</p><h3 id="基本的静态存储元阵列"><a href="#基本的静态存储元阵列" class="headerlink" title="基本的静态存储元阵列"></a>基本的静态存储元阵列</h3><p><img src="https://fangkaipeng.com/wp-content/uploads/2021/03/wp_editor_md_3877eb63dd0bcb28583fd1ff054abf95.jpg" alt="加个图，防止纯文字看的太累"><br>SRAM用锁存器作为存储元）。只要直流供电电源一直加载这个记忆电路上，它就无限期地保存记忆的1状态或0状态。如果电源断电，则存储的数据就会丢失。  </p><p>任何一个SRAM,都有三组信号线与外部打交道：  </p><ol><li>地址线：若有n条地址线，则说明存储器的容量为2<sup>n</sup>个<strong>存储单元</strong></li><li>数据线：数据线的长度等于每个存储单元所含的存储位元数</li><li>控制线：指定对存储器的操作是读还是写</li></ol><p>地址译码器的输出线称为行线，其作用是打开每个存储位元的输入<a href="https://baike.baidu.com/item/与非门" title="点击跳转百度百科">与非门</a>。该门打开后，当外部输入数据为1时，锁存器便记忆了1，当外部输入数据为0时，锁存器便记忆了0。  </p><h3 id="基本的SRAM逻辑结构"><a href="#基本的SRAM逻辑结构" class="headerlink" title="基本的SRAM逻辑结构"></a>基本的SRAM逻辑结构</h3><p>目前的SRAM芯片采用双译码方式，一边组织更大的存储容量。这种译码方式的实质是采用了二级译码：将地址分成x向、y向两部分，第一级进行x向译码（行译码）和y向译码（列译码）的独立译码，然后再存储阵列中完成第二级的交叉译码。而数据宽度有1位、4位、8位，甚至有更多的字节。  </p><h3 id="SRAM读-写时序"><a href="#SRAM读-写时序" class="headerlink" title="SRAM读/写时序"></a>SRAM读/写时序</h3><p>在读周期中，地址线先有效，以便进行地址译码，选中存储单元。为了读出数据，片选信号和读出使能信号也必须有效。从地址有效开始经$t_{AQ}$（读出）时间，数据总线I/O上出现了有效的读出数据。之后片选信号和读出使能信号恢复，$t_{RC}$以后才允许地址总线发生改变。$t_{RC}$时间以后才允许地址总线发生改变。$t_{RC}$时间即为读周期时间。</p><p>在写周期中，也是地址线先有效，接着片选信号有效，写命令有效，此时数据总线I/O上必须置写入数据，在$t_{WD}$时间段将数据写入存储器。之后撤销写命令。为了写入可靠，I/O线的写入数据要有维持时间$t_{hD}$，片选信号的维持时间也比读周期长。$t_{WC}$时间成为写周期时间。为了控制方便，一般取$t_{RC}$=$t_{WC}$，通常称为存取周期。  </p><h3 id="存储器容量的扩充"><a href="#存储器容量的扩充" class="headerlink" title="存储器容量的扩充"></a>存储器容量的扩充</h3><p>当单个存储器芯片的容量不能满足系统要求时，需要把多片存储器芯片组合起来，组成更大容量的存储器。所需芯片数为：d=设计要求的存储器容量/已知芯片存储容量。</p><h4 id="位扩展"><a href="#位扩展" class="headerlink" title="位扩展"></a>位扩展</h4><p>若给定芯片的字数（地址数）符合要求，但位数较短，不满足设计要求的存储器字长，则需要进行位扩展，让多片给定芯片并行工作。三组信号线中，地址线和控制线公用而数据线单独分开连接。</p><h4 id="字扩展"><a href="#字扩展" class="headerlink" title="字扩展"></a>字扩展</h4><p>若给定芯片存储容量较小（字数少），不满足设计要求的总存储容量，则需要进行字扩展，让多片给定芯片分时工作。三组信号线中给定芯片的地址总线和数据总线公用，读写控制信号线公用，由地址总线的高位译码产生片选信号，让各个芯片分时工作。  </p><h4 id="字位扩展"><a href="#字位扩展" class="headerlink" title="字位扩展"></a>字位扩展</h4><p>若给定的芯片的字数和位数都不符合要求，则需要先进性位扩展，在进行字扩展。  </p><h2 id="动态随机存取存储器-DRAM"><a href="#动态随机存取存储器-DRAM" class="headerlink" title="动态随机存取存储器(DRAM)"></a>动态随机存取存储器(DRAM)</h2><h3 id="DRAM存储元的工作原理"><a href="#DRAM存储元的工作原理" class="headerlink" title="DRAM存储元的工作原理"></a>DRAM存储元的工作原理</h3><p>SRAM的存储元是一个触发器，它具有两个稳定的状态。而DRAM简化了每个存储元的结构，因而DRAM的存储密度很该，通常用作计算机的主存储器。  </p><p>与SRAM相比，DRAM的存储元所需元件更少，所以存储密度更高。但是DRAM的附属电路比较复杂，访问时需要额外的电路和操作支持。  </p><h3 id="DRAM芯片的逻辑结构"><a href="#DRAM芯片的逻辑结构" class="headerlink" title="DRAM芯片的逻辑结构"></a>DRAM芯片的逻辑结构</h3><p>与SRAM不同的是，途中增加了行地址锁存器和列地址锁存器。由于DRAM容量很大，地址线的数目相当多，为减少芯片引脚的数量，将地址分为行、列两部分分时传送。存储器容量为1M字，共需20位地址线。此芯片地址引脚的数量为10位，先传送行地址码  </p>]]></content>
    
    
    <categories>
      
      <category>计算机组成</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/02/hello-world/"/>
    <url>/2021/12/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这篇文章是写给自己看的，关于博客内容管理的，内容较为简略，更为详细的内容在这里：<br><a href="https://hexo.io/zh-cn/docs/" title="点击跳转">hexo官方文档</a><br><a href="https://hexo.fluid-dev.com/docs" title="点击跳转">fluid主题官方文档</a>  </p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>_config.yml</code>是全局配置，<code>_config.fluid.yml</code>是主题配置  </p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>生成的静态文件为整个<code>public</code>目录，由于资源文件的链接均采用绝对路径（若改为相对路径，主题会出bug），因此必须将<code>public</code>文件夹作为网站的根目录  </p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
